name: MSK Bot Runner
concurrency:
  group: msk-bot-runner
  cancel-in-progress: true
on:
  workflow_dispatch:
    inputs:
      mode:
        description: 'Bot Mode'
        type: choice
        required: true
        options:
          - normal
          - matchmaking
          - tournament
      tournament_id:
        description: 'Tournament ID (if applicable)'
        type: string
        required: false
      team_id:
        description: 'Team ID (optional)'
        type: string
        required: false
      password:
        description: 'Tournament password (optional)'
        type: string
        required: false
  schedule:
    - cron: '0 */6 * * *' # Run every 6 hours
  push:
    branches: [ main ]
    paths:
      - '**.py'
      - 'config.yml'
permissions:
  actions: write
  contents: write
jobs:
  bot-runner:
    runs-on: ubuntu-latest
    timeout-minutes: 355 # Restart just before GitHub limit
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v5

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install tenacity pyyaml

      - name: Prepare Engine Directory
        run: |
          echo "Initializing engine storage..."
          mkdir -p engines
          sudo apt-get update && sudo apt-get install -y unzip curl

      - name: Fetch Latest Stockfish
        run: |
          chmod +x engines/stockfish || echo "Stockfish not found, proceeding..."

      - name: Acquire Fairy-Stockfish
        run: |
          echo "Obtaining the latest Fairy-Stockfish..."
          RUN_ID=$(curl -s -H "Accept: application/vnd.github+json" \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/fairy-stockfish/Fairy-Stockfish/actions/workflows/release.yml/runs?per_page=1&branch=master&status=success" \
            | jq -r '.workflow_runs[0].id')
          ARTIFACT_URL=$(curl -s -H "Accept: application/vnd.github+json" \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/fairy-stockfish/Fairy-Stockfish/actions/runs/$RUN_ID/artifacts" \
            | jq -r '.artifacts[] | select(.name | contains("linux-x86-64-modern")) | .archive_download_url')
          curl -L -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" -o fsf.zip "$ARTIFACT_URL"
          unzip -o fsf.zip -d engines/
          if [ -f engines/fairy-stockfish_x86-64-modern ]; then
            mv engines/fairy-stockfish_x86-64-modern engines/fsf-latest
          else
            echo "Fairy-Stockfish binary not found!"
            exit 1
          fi
          chmod +x engines/fsf-latest

      - name: Debug MSK_TOKEN
        env:
          MSK_TOKEN: ${{ secrets.MSK_TOKEN }}
        run: |
          if [ -z "$MSK_TOKEN" ]; then
            echo "ERROR: MSK_TOKEN secret is missing!"
            exit 1
          fi
          echo "Debug: MSK_TOKEN length is ${#MSK_TOKEN}"
          echo "Debug: MSK_TOKEN first 4 chars (sanitized): ${MSK_TOKEN:0:4}"

      - name: Inject MSK Bot Token
        env:
          MSK_TOKEN: ${{ secrets.MSK_TOKEN }}
        run: |
          if [ -z "$MSK_TOKEN" ]; then
            echo "ERROR: MSK_TOKEN secret is missing!"
            exit 1
          fi
          # Write token to config.yml, preserving quotes as in your example
          printf 'token: "%s"\n' "$MSK_TOKEN" > config.yml
          echo "‚úÖ Token injected successfully"

      - name: Verify config.yml
        run: |
          echo "Debug: Contents of config.yml (sanitized):"
          cat config.yml | grep -v token || echo "No token field found in config.yml"
          if ! grep -q '^token: ".*"$' config.yml; then
            echo "ERROR: config.yml does not match expected format 'token: \"...\"'"
            exit 1
          fi
          echo "‚úÖ config.yml format verified"

      - name: Launch Bot
        run: |
          CMD_BASE="python3 -u user_interface.py"
          MODE="${{ github.event.inputs.mode }}"
          TOUR_ID="${{ github.event.inputs.tournament_id }}"
          TEAM_ID="${{ github.event.inputs.team_id }}"
          PASSWORD="${{ github.event.inputs.password }}"

          if [[ "$MODE" == "matchmaking" ]]; then
            CMD="$CMD_BASE matchmaking"
            echo "ü§ñ Running command: $CMD"
            eval "$CMD"
          elif [[ "$MODE" == "tournament" ]]; then
            if [[ -z "$TOUR_ID" ]]; then
              echo "‚ö†Ô∏è Tournament ID missing. Skipping."
            else
              ARGS="$TOUR_ID"
              [[ -n "$TEAM_ID" ]] && ARGS="$ARGS $TEAM_ID"
              [[ -n "$PASSWORD" ]] && ARGS="$ARGS $PASSWORD"
              echo "ü§ñ Joining tournament: $ARGS"
              eval "$CMD_BASE \"tournament $ARGS\""
            fi
          else
            echo "ü§ñ Running normal mode."
            eval "$CMD_BASE"
          fi

      - name: Auto-Restart After Timeout
        run: |
          BOT_PID=$!
          ( sleep 20700 && echo "‚è∞ Time's up. Restarting bot..." && kill -SIGTERM $BOT_PID ) &
          wait $BOT_PID
          echo "Bot ended cleanly."
