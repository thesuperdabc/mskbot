name: MSK Bot Runner
concurrency:
  group: msk-bot-runner
  cancel-in-progress: true
on:
  workflow_dispatch:
    inputs:
      mode:
        description: 'Bot Mode'
        type: choice
        required: true
        options:
          - normal
          - matchmaking
          - tournament
      tournament_id:
        description: 'Tournament ID (if tournament mode)'
        type: string
        required: false
      team_id:
        description: 'Team ID (optional)'
        type: string
        required: false
      password:
        description: 'Tournament password (optional)'
        type: string
        required: false
  schedule:
    - cron: '0 */6 * * *' # Every 6 hours
  push:
    branches: [ main ]
    paths:
      - '**.py'
      - 'config.yml'
permissions:
  actions: write
  contents: write
jobs:
  bot-runner:
    runs-on: ubuntu-latest
    timeout-minutes: 355
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v5

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install tenacity pyyaml

      - name: Prepare Engine Permissions
        run: |
          echo "Setting execute permissions for engines..."
          if [ -f engines/stockfish ]; then
            chmod +x engines/stockfish
            echo "‚úÖ Stockfish permissions set"
          else
            echo "ERROR: engines/stockfish not found!"
            exit 1
          fi
          if [ -f engines/fsf-latest ]; then
            chmod +x engines/fsf-latest
            echo "‚úÖ Fairy-Stockfish permissions set"
          else
            echo "Warning: engines/fsf-latest not found, proceeding..."
          fi
          ls -l engines/  # Debug: List engine directory contents

      - name: Debug MSK_TOKEN
        env:
          MSK_TOKEN: ${{ secrets.MSK_TOKEN }}
        run: |
          if [ -z "$MSK_TOKEN" ]; then
            echo "ERROR: MSK_TOKEN secret is missing or empty!"
            exit 1
          fi
          echo "Debug: MSK_TOKEN length is ${#MSK_TOKEN}"
          echo "Debug: MSK_TOKEN first 4 chars (sanitized): ${MSK_TOKEN:0:4}"

      - name: Inject MSK Bot Token
        env:
          MSK_TOKEN: ${{ secrets.MSK_TOKEN }}
        run: |
          if [ -z "$MSK_TOKEN" ]; then
            echo "ERROR: MSK_TOKEN secret is missing or empty!"
            exit 1
          fi
          SANITIZED_TOKEN=$(echo "$MSK_TOKEN" | tr -d '\n\r')
          cat << EOF > config.yml
token: "$SANITIZED_TOKEN"
# MSK Chess OAuth2 Token
engines:
  path: "./engines/stockfish"
EOF
          echo "‚úÖ Token and engine config injected successfully"

      - name: Verify config.yml
        run: |
          echo "Debug: Raw contents of config.yml:"
          cat config.yml || echo "ERROR: config.yml is empty or missing!"
          echo "Debug: Sanitized contents of config.yml (excluding token):"
          grep -v '^token:' config.yml || echo "No non-token fields found in config.yml"
          if ! grep -q '^token: \".*\"$' config.yml; then
            echo "Warning: config.yml does not match strict token format 'token: \"...\"'"
            if grep -q '^token: .*' config.yml; then
              echo "‚úÖ config.yml contains a token field, proceeding..."
            else
              echo "ERROR: config.yml does not contain a valid token field!"
              exit 1
            fi
          else
            echo "‚úÖ config.yml token format verified (strict)"
          fi
          if ! grep -q '^engines:' config.yml; then
            echo "ERROR: config.yml does not contain 'engines' section!"
            exit 1
          fi
          echo "‚úÖ config.yml engines section verified"

      - name: Launch Bot
        run: |
          echo "ü§ñ Starting bot..."
          CMD_BASE="python3 -u user_interface.py"
          MODE="${{ github.event.inputs.mode }}"
          TOUR_ID="${{ github.event.inputs.tournament_id }}"
          TEAM_ID="${{ github.event.inputs.team_id }}"
          PASSWORD="${{ github.event.inputs.password }}"
          if [[ "$MODE" == "matchmaking" ]]; then
            echo "ü§ñ Running matchmaking mode."
            eval "$CMD_BASE matchmaking"
          elif [[ "$MODE" == "tournament" ]]; then
            if [[ -z "$TOUR_ID" ]]; then
              echo "‚ö†Ô∏è Tournament ID missing. Skipping."
            else
              ARGS="$TOUR_ID"
              [[ -n "$TEAM_ID" ]] && ARGS="$ARGS $TEAM_ID"
              [[ -n "$PASSWORD" ]] && ARGS="$ARGS $PASSWORD"
              echo "ü§ñ Joining tournament: $ARGS"
              eval "$CMD_BASE \"tournament $ARGS\""
            fi
          else
            echo "ü§ñ Running normal mode."
            eval "$CMD_BASE"
          fi

      - name: Auto-Restart After Timeout
        run: |
          BOT_PID=$!
          ( sleep 20700 && echo "‚è∞ Time's up. Restarting bot..." && kill -SIGTERM $BOT_PID ) &
          wait $BOT_PID
          echo "Bot ended cleanly."
